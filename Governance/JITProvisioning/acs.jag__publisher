<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var log = new Log('Publisher - acs.jag'),
            configs = require('/config/publisher.js').config(),
            app = require('rxt').app,
            context = app.getContext(),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
            relayState = decodeURIComponent(request.getParameter('RelayState')),
            sso = require('sso'),
            samlRespObj,
            attr = configs.authentication.methods.sso.attributes;
    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
    var keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
    var keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
    var identityAlias = attr.identityAlias;
    var keyStoreProps = {
                KEY_STORE_NAME: keyStoreName,
                KEY_STORE_PASSWORD: keyStorePassword,
                IDP_ALIAS: identityAlias,
                USE_ST_KEY: !attr.useTenantKey
            };
    var sso_sessions = application.get('sso_sessions');
    var server = require('rxt').server;

    var loadTenant = function(username) {
        var carbon = require('carbon');
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
        var TenantAxisUtils = Packages.org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
        var service;
        var ctx;
        var domain = MultitenantUtils.getTenantDomain(username);
        if (domain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(domain)) {
            service = carbon.server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
            ctx = service.getServerConfigContext();
            TenantAxisUtils.setTenantAccessed(domain, ctx);
        }
    };

    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    //Handle SSO login and logout
    if (samlResponse) {
        samlRespObj = sso.client.getSamlObject(samlResponse);
        if (!samlRespObj) {
            log.error('SAML response object validation failure.');
            response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
            return;
        }

        if (!sso.client.isLogoutResponse(samlRespObj)) {
            
            if (!sso.client.validateSamlResponse(samlRespObj,attr,keyStoreProps)) {
                log.error('SAML response object validation failure.');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }            

			log.info("Before decodeSAMLLoginResponse ##################################");
            var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);
			log.info("After decodeSAMLLoginResponse ##################################");
            log.info(stringify(sessionObj));

            if ((!sessionObj) && (!sessionObj.sessionIndex)) {
                log.error('Unable to locate sessionIndex in SAML session object');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }

			// ##################################################################

			
			var carbon = require('carbon');
			var tenantID = "-1234";
			var permissionAPI = require('rxt').permissions;

			var store = require('store');
			//space = store.user.userSpace(sessionObj.loggedInUser);

			provisioning_config = configs.authentication.methods.sso.provisioning;

			log.info("JIT Provisioning enabled for publisher = " + provisioning_config.JITUserProvisioningEnabled);
			if(provisioning_config.JITUserProvisioningEnabled) {
					var serverInstance = store.server
					var um = serverInstance.userManager(tenantID);   // HARDCODED TENANT ID. Maybe should be read from config

					if(!um.userExists(sessionObj.loggedInUser)) {
						um.addUser(sessionObj.loggedInUser, "12345678", ["Internal/publisher", "Internal/store"]);    // Default password added
					}

					//var Utils = context.utils;
					//permissions = {};
					//permissions.APP_LOGIN = Utils.appFeaturePermissionString('login');

					for(var index in sessionObj.attributeObjects) {
						if(index == provisioning_config.roleClaimAttribute)	{
								var roles = sessionObj.attributeObjects[index];
								for(var roleIndex in roles) {
										if(!um.roleExists(roles[roleIndex])) {
											log.info("Adding the role " + roles[roleIndex]);
											um.addRole(roles[roleIndex], [sessionObj.loggedInUser], []);

											//Utils.addPermissionsToRole(permissions, sessionObj.roleAttributeValues[roleIndex], tenantID);
										}
								}
						}
					}
			}

			// #################################################################

            loadTenant(sessionObj.loggedInUser);
            session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
            session.put("Loged", "true");

            sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;
            var user = require('store').user;
            var username = sessionObj.loggedInUser;
            user.loadTenant(username);

            var permissionAPI = require('rxt').permissions;
            var carbon = require('carbon');
            var usr = carbon.server.tenantUser(username);
            var modifiedUsername = user.removeTenantDomainFromUsername(username);
            var hasPublisherLoginPermission = permissionAPI.hasAppPermission('APP_LOGIN', usr.tenantId,
                modifiedUsername);
            sso.client.login(sessionObj.sessionIndex, attr.issuer, session);

            if (hasPublisherLoginPermission) {
                user.emitLogin(username);
                if (log.isDebugEnabled()) {
                    log.debug('user is set :::' + username);
                }
                if(relayState && relayState.indexOf(server.getProxyContextPath()) < 0) {
                    relayState = server.getProxyContextPath() + relayState;
                }
                response.sendRedirect(relayState ? server.buildAppURL(relayState) : server.buildAppURL(context));
            } else {
                log.warn('User ' + sessionObj.loggedInUser + ' does not have permission to access the publisher application.Make sure the user has the publisher role.');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
            }

        } else {
            sso.client.logout(session, attr.issuer);
            response.sendRedirect(server.buildAppURL(context));
        }
    }

    //Handle SLO  requests
    if (samlRequest) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
        var jSessionId = application.get('sso_sessions')[index];
        delete application.get('sso_sessions')[index];
        sso.client.logout(index, new java.lang.String(attr.issuer));
    }
}());
%>
